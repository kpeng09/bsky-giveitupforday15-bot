import { z } from 'zod';
export declare const oauthTokenRequestSchema: z.ZodDiscriminatedUnion<"grant_type", [z.ZodObject<{
    grant_type: z.ZodLiteral<"authorization_code">;
    code: z.ZodString;
    redirect_uri: z.ZodUnion<[z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodString, `${string}:${string}`, string>, `http://[::1]${string}` | "http://localhost" | `http://localhost#${string}` | `http://localhost?${string}` | `http://localhost/${string}` | `http://localhost:${string}` | "http://127.0.0.1" | `http://127.0.0.1#${string}` | `http://127.0.0.1?${string}` | `http://127.0.0.1/${string}` | `http://127.0.0.1:${string}`, string>, `http://[::1]${string}` | "http://127.0.0.1" | `http://127.0.0.1#${string}` | `http://127.0.0.1?${string}` | `http://127.0.0.1/${string}` | `http://127.0.0.1:${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, `${string}:${string}`, string>, `https://${string}`, string>, z.ZodEffects<z.ZodEffects<z.ZodString, `${string}:${string}`, string>, `${string}.${string}:/${string}`, string>]>;
    code_verifier: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    code: string;
    redirect_uri: `http://[::1]${string}` | "http://127.0.0.1" | `http://127.0.0.1#${string}` | `http://127.0.0.1?${string}` | `http://127.0.0.1/${string}` | `http://127.0.0.1:${string}` | `https://${string}` | `${string}.${string}:/${string}`;
    grant_type: "authorization_code";
    code_verifier?: string | undefined;
}, {
    code: string;
    redirect_uri: string;
    grant_type: "authorization_code";
    code_verifier?: string | undefined;
}>, z.ZodObject<{
    grant_type: z.ZodLiteral<"refresh_token">;
    refresh_token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    refresh_token: string;
    grant_type: "refresh_token";
}, {
    refresh_token: string;
    grant_type: "refresh_token";
}>, z.ZodObject<{
    grant_type: z.ZodLiteral<"password">;
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    password: string;
    grant_type: "password";
    username: string;
}, {
    password: string;
    grant_type: "password";
    username: string;
}>, z.ZodObject<{
    grant_type: z.ZodLiteral<"client_credentials">;
}, "strip", z.ZodTypeAny, {
    grant_type: "client_credentials";
}, {
    grant_type: "client_credentials";
}>]>;
export type OAuthTokenRequest = z.infer<typeof oauthTokenRequestSchema>;
//# sourceMappingURL=oauth-token-request.d.ts.map