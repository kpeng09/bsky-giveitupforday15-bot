"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.oauthClientMetadataSchema = void 0;
const zod_1 = require("zod");
const jwk_1 = require("@atproto/jwk");
const oauth_client_id_js_1 = require("./oauth-client-id.js");
const oauth_endpoint_auth_method_js_1 = require("./oauth-endpoint-auth-method.js");
const oauth_grant_type_js_1 = require("./oauth-grant-type.js");
const oauth_redirect_uri_js_1 = require("./oauth-redirect-uri.js");
const oauth_response_type_js_1 = require("./oauth-response-type.js");
const oauth_scope_js_1 = require("./oauth-scope.js");
const uri_js_1 = require("./uri.js");
/**
 * @see {@link https://openid.net/specs/openid-connect-registration-1_0.html}
 * @see {@link https://datatracker.ietf.org/doc/html/rfc7591}
 * @note we do not enforce https: scheme in URIs to support development
 * environments. Make sure to validate the URIs before using it in a production
 * environment.
 */
exports.oauthClientMetadataSchema = zod_1.z.object({
    /**
     * @note redirect_uris require additional validation
     */
    redirect_uris: zod_1.z.array(oauth_redirect_uri_js_1.oauthRedirectUriSchema).nonempty(),
    response_types: zod_1.z
        .array(oauth_response_type_js_1.oauthResponseTypeSchema)
        .nonempty()
        // > If omitted, the default is that the client will use only the "code"
        // > response type.
        .default(['code']),
    grant_types: zod_1.z
        .array(oauth_grant_type_js_1.oauthGrantTypeSchema)
        .nonempty()
        // > If omitted, the default behavior is that the client will use only the
        // > "authorization_code" Grant Type.
        .default(['authorization_code']),
    scope: oauth_scope_js_1.oauthScopeSchema.optional(),
    token_endpoint_auth_method: oauth_endpoint_auth_method_js_1.oauthEndpointAuthMethod
        .default('none')
        .optional(),
    token_endpoint_auth_signing_alg: zod_1.z.string().optional(),
    userinfo_signed_response_alg: zod_1.z.string().optional(),
    userinfo_encrypted_response_alg: zod_1.z.string().optional(),
    jwks_uri: uri_js_1.webUriSchema.optional(),
    jwks: jwk_1.jwksPubSchema.optional(),
    application_type: zod_1.z.enum(['web', 'native']).default('web').optional(), // default, per spec, is "web"
    subject_type: zod_1.z.enum(['public', 'pairwise']).default('public').optional(),
    request_object_signing_alg: zod_1.z.string().optional(),
    id_token_signed_response_alg: zod_1.z.string().optional(),
    authorization_signed_response_alg: zod_1.z.string().default('RS256').optional(),
    authorization_encrypted_response_enc: zod_1.z.enum(['A128CBC-HS256']).optional(),
    authorization_encrypted_response_alg: zod_1.z.string().optional(),
    client_id: oauth_client_id_js_1.oauthClientIdSchema.optional(),
    client_name: zod_1.z.string().optional(),
    client_uri: uri_js_1.webUriSchema.optional(),
    policy_uri: uri_js_1.webUriSchema.optional(),
    tos_uri: uri_js_1.webUriSchema.optional(),
    logo_uri: uri_js_1.webUriSchema.optional(), // TODO: allow data: uri ?
    /**
     * Default Maximum Authentication Age. Specifies that the End-User MUST be
     * actively authenticated if the End-User was authenticated longer ago than
     * the specified number of seconds. The max_age request parameter overrides
     * this default value. If omitted, no default Maximum Authentication Age is
     * specified.
     */
    default_max_age: zod_1.z.number().optional(),
    require_auth_time: zod_1.z.boolean().optional(),
    contacts: zod_1.z.array(zod_1.z.string().email()).optional(),
    tls_client_certificate_bound_access_tokens: zod_1.z.boolean().optional(),
    // https://datatracker.ietf.org/doc/html/rfc9449#section-5.2
    dpop_bound_access_tokens: zod_1.z.boolean().optional(),
    // https://datatracker.ietf.org/doc/html/rfc9396#section-14.5
    authorization_details_types: zod_1.z.array(zod_1.z.string()).optional(),
});
//# sourceMappingURL=oauth-client-metadata.js.map