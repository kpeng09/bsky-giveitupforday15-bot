/**
 * GENERATED CODE - DO NOT MODIFY
 */
import { ValidationResult } from '@atproto/lexicon';
import { $Typed } from '../../../../util';
import type * as AppBskyRichtextFacet from '../../../app/bsky/richtext/facet.js';
import type * as AppBskyEmbedRecord from '../../../app/bsky/embed/record.js';
import type * as ChatBskyActorDefs from '../actor/defs.js';
export interface MessageRef {
    $type?: 'chat.bsky.convo.defs#messageRef';
    did: string;
    convoId: string;
    messageId: string;
}
export declare function isMessageRef<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "messageRef">;
export declare function validateMessageRef<V>(v: V): ValidationResult<MessageRef & V>;
export interface MessageInput {
    $type?: 'chat.bsky.convo.defs#messageInput';
    text: string;
    /** Annotations of text (mentions, URLs, hashtags, etc) */
    facets?: AppBskyRichtextFacet.Main[];
    embed?: $Typed<AppBskyEmbedRecord.Main> | {
        $type: string;
    };
}
export declare function isMessageInput<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "messageInput">;
export declare function validateMessageInput<V>(v: V): ValidationResult<MessageInput & V>;
export interface MessageView {
    $type?: 'chat.bsky.convo.defs#messageView';
    id: string;
    rev: string;
    text: string;
    /** Annotations of text (mentions, URLs, hashtags, etc) */
    facets?: AppBskyRichtextFacet.Main[];
    embed?: $Typed<AppBskyEmbedRecord.View> | {
        $type: string;
    };
    sender: MessageViewSender;
    sentAt: string;
}
export declare function isMessageView<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "messageView">;
export declare function validateMessageView<V>(v: V): ValidationResult<MessageView & V>;
export interface DeletedMessageView {
    $type?: 'chat.bsky.convo.defs#deletedMessageView';
    id: string;
    rev: string;
    sender: MessageViewSender;
    sentAt: string;
}
export declare function isDeletedMessageView<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "deletedMessageView">;
export declare function validateDeletedMessageView<V>(v: V): ValidationResult<DeletedMessageView & V>;
export interface MessageViewSender {
    $type?: 'chat.bsky.convo.defs#messageViewSender';
    did: string;
}
export declare function isMessageViewSender<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "messageViewSender">;
export declare function validateMessageViewSender<V>(v: V): ValidationResult<MessageViewSender & V>;
export interface ConvoView {
    $type?: 'chat.bsky.convo.defs#convoView';
    id: string;
    rev: string;
    members: ChatBskyActorDefs.ProfileViewBasic[];
    lastMessage?: $Typed<MessageView> | $Typed<DeletedMessageView> | {
        $type: string;
    };
    muted: boolean;
    opened?: boolean;
    unreadCount: number;
}
export declare function isConvoView<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "convoView">;
export declare function validateConvoView<V>(v: V): ValidationResult<ConvoView & V>;
export interface LogBeginConvo {
    $type?: 'chat.bsky.convo.defs#logBeginConvo';
    rev: string;
    convoId: string;
}
export declare function isLogBeginConvo<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "logBeginConvo">;
export declare function validateLogBeginConvo<V>(v: V): ValidationResult<LogBeginConvo & V>;
export interface LogLeaveConvo {
    $type?: 'chat.bsky.convo.defs#logLeaveConvo';
    rev: string;
    convoId: string;
}
export declare function isLogLeaveConvo<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "logLeaveConvo">;
export declare function validateLogLeaveConvo<V>(v: V): ValidationResult<LogLeaveConvo & V>;
export interface LogCreateMessage {
    $type?: 'chat.bsky.convo.defs#logCreateMessage';
    rev: string;
    convoId: string;
    message: $Typed<MessageView> | $Typed<DeletedMessageView> | {
        $type: string;
    };
}
export declare function isLogCreateMessage<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "logCreateMessage">;
export declare function validateLogCreateMessage<V>(v: V): ValidationResult<LogCreateMessage & V>;
export interface LogDeleteMessage {
    $type?: 'chat.bsky.convo.defs#logDeleteMessage';
    rev: string;
    convoId: string;
    message: $Typed<MessageView> | $Typed<DeletedMessageView> | {
        $type: string;
    };
}
export declare function isLogDeleteMessage<V>(v: V): v is import("../../../../util").$TypedObject<V, "chat.bsky.convo.defs", "logDeleteMessage">;
export declare function validateLogDeleteMessage<V>(v: V): ValidationResult<LogDeleteMessage & V>;
//# sourceMappingURL=defs.d.ts.map