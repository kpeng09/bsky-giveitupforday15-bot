"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityResolver = void 0;
const syntax_1 = require("@atproto/syntax");
const handle_resolver_1 = require("@atproto-labs/handle-resolver");
class IdentityResolver {
    constructor(didResolver, handleResolver) {
        Object.defineProperty(this, "didResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: didResolver
        });
        Object.defineProperty(this, "handleResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: handleResolver
        });
    }
    async resolve(input, options) {
        const document = (0, handle_resolver_1.isResolvedHandle)(input)
            ? await this.getDocumentFromDid(input, options)
            : await this.getDocumentFromHandle(input, options);
        const service = document.service?.find((isAtprotoPersonalDataServerService), document);
        if (!service) {
            throw new TypeError(`No valid "AtprotoPersonalDataServer" service found in "${document.id}" DID document`);
        }
        return {
            did: document.id,
            pds: new URL(service.serviceEndpoint),
        };
    }
    async getDocumentFromDid(did, options) {
        return this.didResolver.resolve(did, options);
    }
    async getDocumentFromHandle(input, options) {
        const handle = (0, syntax_1.normalizeAndEnsureValidHandle)(input);
        const did = await this.handleResolver.resolve(handle, options);
        if (!did) {
            throw new TypeError(`Handle "${handle}" does not resolve to a DID`);
        }
        options?.signal?.throwIfAborted();
        // Note: Not using "return this.resolveDid(did, options)" to make the extra
        // check for the handle in the DID document:
        const document = await this.didResolver.resolve(did, options);
        // Ensure that the handle is included in the document
        if (!document.alsoKnownAs?.includes(`at://${handle}`)) {
            throw new TypeError(`Did document for "${did}" does not include the handle "${handle}"`);
        }
        return document;
    }
}
exports.IdentityResolver = IdentityResolver;
function isAtprotoPersonalDataServerService(s) {
    return (typeof s.serviceEndpoint === 'string' &&
        s.type === 'AtprotoPersonalDataServer' &&
        (s.id.startsWith('#')
            ? s.id === '#atproto_pds'
            : s.id === `${this.id}#atproto_pds`));
}
//# sourceMappingURL=identity-resolver.js.map