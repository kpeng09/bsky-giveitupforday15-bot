"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidPlcMethod = void 0;
const did_1 = require("@atproto/did");
const fetch_1 = require("@atproto-labs/fetch");
const pipe_1 = require("@atproto-labs/pipe");
const fetchSuccessHandler = (0, pipe_1.pipe)((0, fetch_1.fetchOkProcessor)(), (0, fetch_1.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, fetch_1.fetchJsonZodProcessor)(did_1.didDocumentValidator));
class DidPlcMethod {
    constructor(options) {
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "plcDirectoryUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.plcDirectoryUrl = new URL(options?.plcDirectoryUrl || 'https://plc.directory/');
        this.fetch = (0, fetch_1.bindFetch)(options?.fetch);
    }
    async resolve(did, options) {
        // Although the did should start with `did:plc:` (thanks to typings), we
        // should still check if the msid is valid.
        (0, did_1.assertDidPlc)(did);
        // Should never throw
        const url = new URL(`/${encodeURIComponent(did)}`, this.plcDirectoryUrl);
        return this.fetch(url, {
            redirect: 'error',
            headers: { accept: 'application/did+ld+json,application/json' },
            signal: options?.signal,
        }).then(fetchSuccessHandler);
    }
}
exports.DidPlcMethod = DidPlcMethod;
//# sourceMappingURL=plc.js.map