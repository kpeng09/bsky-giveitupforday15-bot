import { Did } from '@atproto/did';
import { Fetch } from '@atproto-labs/fetch';
import { DidMethod, ResolveDidOptions } from '../did-method.js';
export type DidPlcMethodOptions = {
    /**
     * @default globalThis.fetch
     */
    fetch?: Fetch;
    /**
     * @default 'https://plc.directory/'
     */
    plcDirectoryUrl?: string | URL;
};
export declare class DidPlcMethod implements DidMethod<'plc'> {
    protected readonly fetch: Fetch<unknown>;
    readonly plcDirectoryUrl: URL;
    constructor(options?: DidPlcMethodOptions);
    resolve(did: Did<'plc'>, options?: ResolveDidOptions): Promise<{
        id: `did:${string}:${string}`;
        '@context': "https://www.w3.org/ns/did/v1" | [string, ...string[]];
        controller?: `did:${string}:${string}` | `did:${string}:${string}`[] | undefined;
        alsoKnownAs?: string[] | undefined;
        service?: {
            type: string | string[];
            id: string;
            serviceEndpoint: string | Record<string, string> | [string | Record<string, string>, ...(string | Record<string, string>)[]];
        }[] | undefined;
        authentication?: (string | {
            type: string;
            id: string;
            controller: `did:${string}:${string}` | `did:${string}:${string}`[];
            publicKeyJwk?: Record<string, unknown> | undefined;
            publicKeyMultibase?: string | undefined;
        })[] | undefined;
        verificationMethod?: (string | {
            type: string;
            id: string;
            controller: `did:${string}:${string}` | `did:${string}:${string}`[];
            publicKeyJwk?: Record<string, unknown> | undefined;
            publicKeyMultibase?: string | undefined;
        })[] | undefined;
    }>;
}
//# sourceMappingURL=plc.d.ts.map