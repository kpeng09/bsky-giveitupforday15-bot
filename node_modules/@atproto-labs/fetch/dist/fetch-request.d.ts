import { FetchError } from './fetch-error.js';
import { asRequest } from './fetch.js';
export declare class FetchRequestError extends FetchError {
    readonly request: Request;
    constructor(request: Request, statusCode?: number, message?: string, options?: ErrorOptions);
    get expose(): boolean;
    static from(request: Request, cause: unknown): FetchRequestError;
}
export declare function protocolCheckRequestTransform(protocols: {
    'about:'?: boolean;
    'blob:'?: boolean;
    'data:'?: boolean;
    'file:'?: boolean;
    'http:'?: boolean | {
        allowCustomPort: boolean;
    };
    'https:'?: boolean | {
        allowCustomPort: boolean;
    };
}): (input: Request | string | URL, init?: RequestInit) => Request;
export declare function redirectCheckRequestTransform(): (input: Request | string | URL, init?: RequestInit) => Request;
export declare function requireHostHeaderTransform(): (input: Request | string | URL, init?: RequestInit) => Request;
export declare const DEFAULT_FORBIDDEN_DOMAIN_NAMES: string[];
export declare function forbiddenDomainNameRequestTransform(denyList?: Iterable<string>): typeof asRequest | ((input: Request | string | URL, init?: RequestInit) => Promise<Request>);
//# sourceMappingURL=fetch-request.d.ts.map